# *Задача 20: * В настольной игре Скрабл (Scrabble) каждая буква имеет определенную ценность. 
# В случае с английским алфавитом очки распределяются так:
# A, E, I, O, U, L, N, S, T, R – 1 очко; 
# D, G – 2 очка; 
# B, C, M, P – 3 очка; 
# F, H, V, W, Y – 4 очка; K – 5 очков; J, X – 8 очков; Q, Z – 10 очков. 
# А русские буквы оцениваются так: А, В, Е, И, Н, О, Р, С, Т – 1 очко; 
# Д, К, Л, М, П, У – 2 очка; Б, Г, Ё, Ь, Я – 3 очка; Й, Ы – 4 очка; Ж, З, Х, Ц, Ч – 5 очков; 
# Ш, Э, Ю – 8 очков; Ф, Щ, Ъ – 10 очков. 
# Напишите программу, которая вычисляет стоимость введенного пользователем слова. 
# Будем считать, что на вход подается только одно слово, которое содержит либо только английские, либо только русские буквы.

# *Пример:*
# ноутбук
#     12

# Модуль Re (import re) — операции с регулярными выражениями
# Основная функция модуля re — предложить поиск, в котором используются регулярное выражение и строка. 
# Здесь он либо возвращает первое совпадение, либо ничего.
# источник: https://python.ivan-shamaev.ru/python-3-regular-expressions-regex-match-group-string/
import re

# функция, которая возвращает "правда", если слово на русском, и "ложь", если на английском
def russian(slovo):
	return bool(re.search('[а-яА-Я]', slovo))
# создаем словари, где ключами будут очки, а значениями – строки из букв
ochki_en = {
        1:'AEIOULNSTR',
      	2:'DG',
      	3:'BCMP',
      	4:'FHVWY',
      	5:'K',
      	8:'JZ',
      	10:'QZ'}
ochki_ru = {
        1:'АВЕИНОРСТ',
      	2:'ДКЛМПУ',
      	3:'БГЁЬЯ',
      	4:'ЙЫ',
      	5:'ЖЗХЦЧ',
      	8:'ШЭЮ',
      	10:'ФЩЪ'}
print("Введи слово:")
slovo = input().upper()

# Метод items() позволяет обращаться к ключам и значениям одновременно – если очередная 
# буква в слове входит в одно из значений, генератор добавит ключ в список, 
# а метод списка sum() подсчитает стоимость всего слова:
if russian(slovo):
	print(sum([k for i in slovo for k, v in ochki_ru.items() if i in v]))
else:
	print(sum([k for i in slovo for k, v in ochki_en.items() if i in v]))
